@implements IDisposable

<div class="modal fade" id="@Id" tabindex="-1" role="dialog" aria-modal="true" aria-labelledby="@($"{Id}ModalLabel")" aria-describedby="@($"{Id}ModalContent")" data-bs-keyboard=@(DismissOnEscapeKey ? "true" : "false") data-bs-backdrop=@(DismissOnOutsideClick ? "true" : "static")>
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @if (EnableHeader)
            {
                <div class="modal-header">
                    <h5 class="modal-title" id="@($"{Id}ModalLabel")">@Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@StartDismiss" @onclick:stopPropagation="true"></button>
                </div>
            }
            <div id="@($"{Id}ModalContent")" class="modal-body">
                @Content
            </div>
            @if (EnableFooter)
            {
                <div class="modal-footer">
                    @if (EnableDismissButton)
                    {
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="@StartDismiss" @onclick:stopPropagation="true">@DismissText</button>
                    }
                    @if (EnableConfirmButton)
                    {
                        <button type="button" class="@ConfirmButtonClass" data-bs-dismiss="modal" @onclick="@StartConfirmation" @onclick:stopPropagation="true">@ConfirmtText</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// JavaScript runtime interop.
    /// Don't override this property, it's automatically injected by Blazor.
    /// </summary>
    [Inject]
    public IJSRuntime? JS { get; set; }

    /// <summary>
    /// The modal identifier, default value is a GUID. If set manually, the value must be unique and browser DOM compliant.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = $"m{Guid.NewGuid().ToString("N")}";

    /// <summary>
    /// The title displayed in the header of the modal.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// The text displayed in the confirm button.
    /// </summary>
    [Parameter]
    public string ConfirmtText { get; set; } = "Confirm";

    /// <summary>
    /// The text displayed in the dismiss button.
    /// </summary>
    [Parameter]
    public string DismissText { get; set; } = "Close";

    /// <summary>
    /// If set to <c>true</c>, the confirm button will be displayed in the footer of the modal.
    /// </summary>
    [Parameter]
    public bool EnableConfirmButton { get; set; }

    /// <summary>
    /// If set to <c>true</c>, the dismiss button will be displayed in the footer of the modal.
    /// </summary>
    [Parameter]
    public bool EnableDismissButton { get; set; }

    /// <summary>
    /// If set to <c>true</c>, the header of the modal will be displayed.
    /// </summary>
    [Parameter]
    public bool EnableHeader { get; set; } = true;

    /// <summary>
    /// If set to <c>true</c>, the footer of the modal will be displayed.
    /// </summary>
    [Parameter]
    public bool EnableFooter { get; set; } = true;

    /// <summary>
    /// If set to <c>true</c>, the modal will be dismissed when the user clicks outside the modal.
    /// </summary>
    [Parameter]
    public bool DismissOnOutsideClick { get; set; }

    /// <summary>
    /// If set to <c>true</c>, the modal will be dismissed when the user presses the escape key.
    /// </summary>
    [Parameter]
    public bool DismissOnEscapeKey { get; set; }

    /// <summary>
    /// The CSS class applied to the confirm button, default value is "<c>btn btn-primary</c>".
    /// </summary>
    [Parameter]
    public string ConfirmButtonClass { get; set; } = "btn btn-primary";

    /// <summary>
    /// The content of the modal, must be set.
    /// </summary>
    [Parameter]
    public RenderFragment? Content { get; set; }

    private static bool jsModuleImported = false;
    private IJSObjectReference? module;

    private ModalEventsJsHelper modalEventsJsHelper = new();
    private DotNetObjectReference<ModalEventsJsHelper>? modalEventsJsHelperRef;

    private bool userInteracted;
    private bool userHasConfirmed;

    /// <summary>
    /// Shows the modal and waits for the user to interact with it.
    /// </summary>
    /// <returns><c>true</c> if the user confirmed, otherwise <c>false</c>.</returns>
    /// <exception cref="InvalidOperationException"></exception>
    public async Task<bool> ShowAsync()
    {
        if (module == null)
        {
            throw new InvalidOperationException("Module is not initialized.");
        };

        await module.InvokeVoidAsync("displayModal", Id);

        userInteracted = false;
        await WaitUserConfirmation();

        return userHasConfirmed;
    }

    // <inheritdoc />
    public void Dispose()
    {
        modalEventsJsHelper.OnModalClosed -= ModalEventsJsHelper_OnModalClosed;
        modalEventsJsHelperRef?.Dispose();
    }

    // <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        modalEventsJsHelper.OnModalClosed += ModalEventsJsHelper_OnModalClosed;
        if (JS == null)
        {
            throw new InvalidOperationException("JSRuntime is not initialized.");
        };

        // Imports the module only once because the module will be used across all modals component instances.
        if (!jsModuleImported)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/nich2408.Blazor.SimpleModal/modals.js");
        };
        if (module is null)
        {
            throw new InvalidOperationException("Module is not initialized.");
        };

        // Initializes the helper reference needed to make Javascript interop with dotnet.
        // More info: https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-8.0#pass-a-dotnetobjectreference-to-a-class-with-multiple-javascript-functions
        modalEventsJsHelperRef = DotNetObjectReference.Create(modalEventsJsHelper);
        await module.InvokeVoidAsync("initializeModalEvents", Id, modalEventsJsHelperRef);
    }

    // <inheritdoc />
    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            throw new InvalidOperationException("Id is required.");
        };
        if (Content is null)
        {
            throw new InvalidOperationException("Content is required.");
        };
    }

    private async Task WaitUserConfirmation()
    {
        while (!userInteracted)
        {
            await Task.Delay(20);
        }
    }

    private void StartConfirmation()
    {
        userHasConfirmed = true;
    }

    private void StartDismiss()
    {
        userHasConfirmed = false;
    }

    private void ModalEventsJsHelper_OnModalClosed(object? sender, EventArgs eventArgs)
    {
        userInteracted = true;
    }
}
